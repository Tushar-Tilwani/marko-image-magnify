$ {
  const {
    pos: { x, y },
    ratio: { cx, cy },
  } = state;
}

<div.image-magnify>
  <div.image--container
    tabindex="0"
    key="imageContainer"
    on-mouseenter("mouseEvent")
    on-mousemove("mouseEvent")
    on-keydown("keyDown")
  >
    <div.imagezoom--lens
      tabindex="0"
      role="group"
      aria-roledescription="image zoom"
      key="lens"
      style={ left: `${x}px`, top: `${y}px` }
    >
      <div.arrow--container>
        <span.arrow.arrow--right/>
        <span.arrow.arrow--down/>
        <span.arrow.arrow--left/>
        <span.arrow.arrow--up/>
      </div>
    </div>
    <img#image
      src="https://i.ebayimg.com/images/g/Rj8AAOSwmRNj2Y1~/s-l500.jpg"
      width="300"
      height="240"
      alt="side view of a reebok brand shoe"
      key="image"
    >
  </div>
  <div.imagezoom--result#result
    key="result"
    style={
      backgroundImage: `url("https://i.ebayimg.com/images/g/Rj8AAOSwmRNj2Y1~/s-l500.jpg")`,
      backgroundPosition: `-${x * cx}px -${y * cy}px`,
      backgroundSize: `${300 * cx}px ${240 * cy}px`,
    }
  />
</div>
class {
  onCreate() {
    this.state = { pos: { x: 0, y: 0 }, ratio: { cx: 1, cy: 1 } };
  }
  onMount() {
    this.imgContainer = this.getEl("imageContainer");
    this.lens = this.getEl("lens");
    this.img = this.getEl("image");
    this.result = this.getEl("result");
    this._getCursorPosition = this._getCursorPosition.bind(this);
    this._moveLens = this._moveLens.bind(this);
    const { lens, result } = this;
    this.state.ratio = {
      cx: result.offsetWidth / lens.offsetWidth,
      cy: result.offsetHeight / lens.offsetHeight,
    };
  }

  mouseEvent(e) {
    const { lens } = this;
    /* Get the cursor's x and y positions: */
    const curPosition = this._getCursorPosition(e);
    /* Calculate the position of the lens: */
    const x = curPosition.x - lens.offsetWidth / 2;
    const y = curPosition.y - lens.offsetHeight / 2;
    /* Prevent any other actions that may occur when moving over the image */
    e.preventDefault();
    lens.focus();
    this._moveLens(x, y);
  }

  keyDown(e) {
    if (!(e.keyCode >= 37 && e.keyCode <= 40)) {
      return true;
    }
    const MOVE_PX_DEFAULT = 25;
    const { lens } = this;
    let { x: left, y: top } = this.state.pos;
    switch (e.keyCode) {
      case 37: //left arrow key
        left = left - MOVE_PX_DEFAULT;
        break;
      case 38: //Up arrow key
        top = top - MOVE_PX_DEFAULT;
        break;
      case 39: //right arrow key
        left = left + MOVE_PX_DEFAULT;
        break;
      case 40: //down arrow key
        top = top + MOVE_PX_DEFAULT;
        break;
    }

    this._moveLens(left, top);
    e.preventDefault();
  }

  _getCursorPosition(e = window.event) {
    const { img } = this;
    let x = 0;
    let y = 0;
    /* Get the x and y positions of the image: */
    const a = img.getBoundingClientRect();
    /* Calculate the cursor's x and y coordinates, relative to the image: */
    x = e.pageX - a.left;
    y = e.pageY - a.top;
    /* Consider any page scrolling: */
    x = x - window.pageXOffset;
    y = y - window.pageYOffset;
    return { x, y };
  }

  /* Move the lens in x and y coordinates */
  _moveLens(x, y) {
    const { img, lens, result, cx, cy } = this;
    /* Prevent the lens from being positioned outside the image: */
    if (x > img.width - lens.offsetWidth) {
      x = img.width - lens.offsetWidth;
    }
    if (x < 0) {
      x = 0;
    }
    if (y > img.height - lens.offsetHeight) {
      y = img.height - lens.offsetHeight;
    }
    if (y < 0) {
      y = 0;
    }

    /* Set the position of the lens: */
    // lens.style.left = x + "px";
    // lens.style.top = y + "px";
    this.state.pos = { x, y };
    /* Display what the lens "sees": */
    // result.style.backgroundPosition = `-${x * cx}px -${y * cy}px`;
  }
}
style {
  .image-magnify {
    display: flex;
    overflow: visible;
  }

  .image--container {
    position: relative;
    display: inline-block;
    overflow: hidden;
  }

  .imagezoom--lens {
    position: absolute;
    opacity: 0;
    border: 1px solid #d4d4d4;
    width: 100px;
    height: 100px;
    cursor: crosshair;
    transition: opacity 0.2s ease-in 0s;
  }

  .imagezoom--lens,
  .imagezoom--result {
    transition: opacity 0.2s ease-in 0s;
  }
  .image--container:hover .imagezoom--lens,
  .image--container:hover + .imagezoom--result {
    opacity: 1;
    transition-duration: 0.3s;
  }

  .imagezoom--result {
    position: absolute;
    border: 1px solid #d4d4d4;
    width: 300px;
    height: 300px;
    left: 300px;
    opacity: 0;

    z-index: 999;
  }

  .arrow--container {
    position: relative;
  }
  .arrow {
    position: absolute;
    border: solid black;
    border-width: 0 3px 3px 0;
    display: inline-block;
    padding: 3px;
  }

  .arrow--right {
    top: 45px;
    right: 15px;
    transform: rotate(-45deg);
    -webkit-transform: rotate(-45deg);
  }

  .arrow--left {
    top: 45px;
    left: 15px;
    transform: rotate(135deg);
    -webkit-transform: rotate(135deg);
  }

  .arrow--up {
    top: 15px;
    left: 45px;
    transform: rotate(-135deg);
    -webkit-transform: rotate(-135deg);
  }

  .arrow--down {
    top: 75px;
    left: 45px;
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
  }
}
